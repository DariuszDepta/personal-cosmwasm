version: '3'

silent: true

tasks:

  aall:
    cmds:
      - cmd: t clean && t build && t clippy && t test
      - task: before-commit

  all:
    cmds:
      - cmd: t clean && t build-all && t clippy-all && t test-all

  before-commit:
    desc: Run this before committing any changes
    cmds:
      - cmd: cargo clean
      - cmd: rm -rf Cargo.lock
      - cmd: cargo +stable build

  build:
    desc: Runs all build variants
    cmds:
      - task: build-all
      - task: build-default
      - task: build-no-default
      - task: build-1-1
      - task: build-1-2
      - task: build-1-3
      - task: build-1-4
      - task: build-2-0
      - task: build-2-1
      - task: build-2-2
      - task: build-stargate
      - task: build-staking
      - task: build-min
      - task: build-max
      - task: build-1-78-all
      - task: build-1-78-default

  build-all:
    desc: Builds in debug mode with all features enabled
    cmds:
      - cmd: cargo +stable build --all-features

  build-default:
    desc: Builds in debug mode with default features enabled
    cmds:
      - cmd: cargo +stable build

  build-no-default:
    desc: Builds in debug mode without default features
    cmds:
      - cmd: cargo +stable build --no-default-features

  build-1-1:
    desc: Builds the library in debug mode with "cosmwasm_1_1" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_1_1

  build-1-2:
    desc: Builds the library in debug mode with "cosmwasm_1_2" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_1_2

  build-1-3:
    desc: Builds the library in debug mode with "cosmwasm_1_3" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_1_3

  build-1-4:
    desc: Builds the library in debug mode with "cosmwasm_1_4" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_1_4

  build-2-0:
    desc: Builds the library in debug mode with "cosmwasm_2_0" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_2_0

  build-2-1:
    desc: Builds the library in debug mode with "cosmwasm_2_1" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_2_1

  build-2-2:
    desc: Builds the library in debug mode with "cosmwasm_2_2" feature enabled
    cmds:
      - cmd: cargo +stable build --features cosmwasm_2_2

  build-stargate:
    desc: Builds the library in debug mode with "stargate" feature enabled
    cmds:
      - cmd: cargo +stable build --features stargate

  build-staking:
    desc: Builds the library in debug mode with "staking" feature enabled
    cmds:
      - cmd: cargo +stable build --features staking

  build-min:
    desc: Equivalent of the build_minimal job in Circle CI
    cmds:
      - cmd: cargo clean
      - cmd: rm -rf Cargo.lock
      - cmd: cargo update -p ahash && cargo update -p num-bigint
      - cmd: RUSTC_BOOTSTRAP=1 cargo +stable build -Zminimal-versions --all-features
      - cmd: rm -rf Cargo.lock
      - cmd: cargo +stable build --all-features

  build-max:
    desc: Equivalent of the build_maximal job in Circle CI
    cmds:
      - cmd: cargo build --locked --all-features

  build-1-78-all:
    desc: Builds in debug mode with all features enabled and rust version 1.78
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu build --all-features

  build-1-78-default:
    desc: Builds in debug mode with all features enabled and rust version 1.78
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu build

  clean:
    desc: Removes all target artifacts
    cmds:
      - cmd: cargo clean

  clippy:
    desc: Runs all clippy variants
    cmds:
      - task: clippy-all
      - task: clippy-default
      - task: clippy-no-default
      - task: clippy-1-1
      - task: clippy-1-2
      - task: clippy-1-3
      - task: clippy-1-4
      - task: clippy-2-0
      - task: clippy-2-1
      - task: clippy-2-2
      - task: clippy-stargate
      - task: clippy-staking
      - task: clippy-1-78-all
      - task: clippy-1-78-default

  clippy-all:
    desc: Runs clippy with all features enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --all-features

  clippy-default:
    desc: Runs clippy with default features enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets

  clippy-no-default:
    desc: Runs clippy without default features
    cmds:
      - cmd: cargo +nightly clippy --no-default-features --all-targets

  clippy-1-1:
    desc: Runs clippy with "cosmwasm_1_1" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_1_1

  clippy-1-2:
    desc: Runs clippy with "cosmwasm_1_2" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_1_2

  clippy-1-3:
    desc: Runs clippy with "cosmwasm_1_3" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_1_3

  clippy-1-4:
    desc: Runs clippy with "cosmwasm_1_4" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_1_4

  clippy-2-0:
    desc: Runs clippy with "cosmwasm_2_0" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_2_0

  clippy-2-1:
    desc: Runs clippy with "cosmwasm_2_1" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_2_1

  clippy-2-2:
    desc: Runs clippy with "cosmwasm_2_2" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features cosmwasm_2_2

  clippy-stargate:
    desc: Runs clippy with "stargate" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features stargate

  clippy-staking:
    desc: Runs clippy with "staking" feature enabled
    cmds:
      - cmd: cargo +nightly clippy --all-targets --features staking

  clippy-1-78-all:
    desc: Runs clippy with all features and Rust version 1.78.0
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu clippy --all-targets --all-features -- -D warnings

  clippy-1-78-default:
    desc: Runs clippy with all features and Rust version 1.78.0
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu clippy --all-targets -- -D warnings

  cov:
    desc: Generates code coverage report
    cmds:
      - cmd: cargo +nightly llvm-cov --no-cfg-coverage --no-cfg-coverage-nightly --branch --html
      - cmd: echo -e "\n\e[1;32mOpen coverage report\x3A\e[0m file:///$(pwd)/target/llvm-cov/html/index.html\n"

  tov:
    desc: Runs code coverage using tarpaulin
    cmds:
      - cmd: ./tarpaulage.sh

  lov:
    desc: Runs code coverage using llvm-cov
    cmds:
      - cmd: cargo +nightly llvm-cov --branch --html

  doc:
    desc: Generates documentation with all features
    cmds:
      - cmd: cargo +stable doc --no-deps --all-features

  doc-open:
    desc: Generates documentation with all features and opens it in a browser
    cmds:
      - cmd: cargo +stable doc --no-deps --open --all-features

  doc-priv:
    desc: Generates documentation with private items and all features
    cmds:
      - cmd: cargo +stable doc --no-deps --document-private-items --all-features

  doc-priv-open:
    desc: Generates documentation with private items and all features and opens it in a browser
    cmds:
      - cmd: cargo +stable doc --no-deps --document-private-items --open --all-features

  fmt:
    desc: Formats the code
    cmds:
      - cmd: cargo fmt

  test:
    desc: Runs all test variants
    cmds:
      - task: test-all
      - task: test-default
      - task: test-no-default
      - task: test-1-1
      - task: test-1-2
      - task: test-1-3
      - task: test-1-4
      - task: test-2-0
      - task: test-2-1
      - task: test-2-2
      - task: test-stargate
      - task: test-staking
      - task: test-min
      - task: test-max
      - task: test-1-78-all
      - task: test-1-78-default

  test-all:
    desc: Runs all tests in debug mode with all features enabled
    cmds:
      - cmd: cargo +stable test --all-features

  test-default:
    desc: Runs all tests in debug mode with default features enabled
    cmds:
      - cmd: cargo +stable test

  test-no-default:
    desc: Runs all tests in debug mode without default features
    cmds:
      - cmd: cargo +stable test --no-default-features

  test-1-1:
    desc: Runs all tests in debug mode with "cosmwasm_1_1" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_1_1

  test-1-2:
    desc: Runs all tests in debug mode with "cosmwasm_1_2" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_1_2

  test-1-3:
    desc: Runs all tests in debug mode with "cosmwasm_1_3" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_1_3

  test-1-4:
    desc: Runs all tests in debug mode with "cosmwasm_1_4" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_1_4

  test-2-0:
    desc: Runs all tests in debug mode with "cosmwasm_2_0" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_2_0

  test-2-1:
    desc: Runs all tests in debug mode with "cosmwasm_2_1" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_2_1

  test-2-2:
    desc: Runs all tests in debug mode with "cosmwasm_2_2" feature enabled
    cmds:
      - cmd: cargo +stable test --features cosmwasm_2_2

  test-stargate:
    desc: Runs all tests in debug mode with "stargate" feature enabled
    cmds:
      - cmd: cargo +stable test --features stargate

  test-staking:
    desc: Runs all tests in debug mode with "staking" feature enabled
    cmds:
      - cmd: cargo +stable test --features staking

  test-min:
    desc: Runs tests with minimal version like in Circle CI
    cmds:
      - cmd: rm -rf Cargo.lock
      - cmd: cargo update -p ahash && cargo update -p num-bigint
      - cmd: RUSTC_BOOTSTRAP=1 cargo +stable test -Zminimal-versions --all-features
      - cmd: rm -rf Cargo.lock
      - cmd: cargo +stable test --all-features

  test-max:
    desc: Runs tests with maximal versions like in Circle CI
    cmds:
      - cmd: cargo test --locked --all-features

  test-1-78-all:
    desc: Runs tests in debug mode with all features enabled and rust version 1.78
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu test --all-features

  test-1-78-default:
    desc: Runs tests in debug mode with all features enabled and rust version 1.78
    cmds:
      - cmd: cargo +1.78.0-x86_64-unknown-linux-gnu test

  all-features:
    cmds:
      - task: build-all-features
      - task: clippy-all-features
      - task: test-all-features

  build-all-features:
    cmds:
      - cmd: cargo +stable hack build --feature-powerset

  clippy-all-features:
    cmds:
      - cmd: cargo +stable hack clippy --feature-powerset

  test-all-features:
    cmds:
      - cmd: cargo +stable hack test --feature-powerset
